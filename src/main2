#include "../minishell.h"
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>

void mini_getpid(t_prompt *p)
{
    pid_t pid;

    pid =fork();
    if (pid < 0 || !pid)
    {
        ft_free_matrix(&p->envp);
        exit(1);
    };
    waitpid(pid, NULL, 0); //wait for the child 
    p->pid = pid-1; //After the child exit , he child's PID is one greater than the parent's PID
}

// Parent process: PID = 100, Child PID = 101
// Child process: PID = 101
// Parent process: Child has exited
// Parent process: p->pid = 100

t_prompt init_vars(t_prompt prompt, char *str, char **argv)
{
    char *n;//store number as string 

    prompt.envp = mini_setenv("PWD", str, prompt.envp, 3);//set the current diretory 
    free(str);//free the allovated memory (egye men getcwd)

    str = mini_getenv("SHLVL", prompt.envp, 5);//shell level(hiye kama terminal bi aleb terminal ana (orignal terminal 1 run minishell sart 2 ))

    if (!str || ft_atoi(str) <= 0) // If SHLVL is missing or invalid
        n = ft_strdup("1");  // Set SHLVL to "1"
    else
        n = ft_itoa(ft_atoi(str) + 1); // Convert SHLVL to int, increment, then back to string

    free(str); 
    prompt.envp = mini_setenv("SHLVL", n, prompt.envp, 5);
    free(n);

    //Since PATH already exists in prompt.envp, we donâ€™t need to change anything. just free it later
    //How Can We Start Minishell Without envp? Using env -i to remove all environment variables:

    str = mini_getenv("PATH", prompt.envp, 4);
    if (!str) //If you start Minishell without any environment variables, SHLVL won't exist.
        prompt.envp = mini_setenv("PATH", "/usr/local/sbin:/usr/local/bin:/usr/bin:/bin", prompt.envp, 4);//Since PATH is missing, we hardcode a default value

    free(str);

    str = mini_getenv("_", prompt.envp, 1); //_ stores the last executed command d $_ moves into the last created folde
    if (!str) //eza lenvp ma ken fiyo _ handle it add it eza it was all good 
        prompt.envp = mini_setenv("_", argv[0], prompt.envp, 1); //argv[0] is the name of the program that was executed, which is usually ./minishell
    free(str); //ls -l -ls if i do echo$_ i get ls the lst fuction exuctble 

    return (prompt);
}

t_prompt init_prompt(char **argv, char **envp)
{
    t_prompt promt;
    char *str;

    str = NULL;
    promt.cmds = NULL;
    promt.envp = ft_dup_matrix(envp);
    mini_getpid(&promt);
    promt = init_vars(promt, str , argv);

    return (promt);
}

int main(int argc, char **argv, char **envp)
{
    char *str;
    char *out;
    t_prompt promt;

    promt = init_prompt(argv, envp); //init the shell 
    while(1)
    {
        
    }

    return (0);
}
