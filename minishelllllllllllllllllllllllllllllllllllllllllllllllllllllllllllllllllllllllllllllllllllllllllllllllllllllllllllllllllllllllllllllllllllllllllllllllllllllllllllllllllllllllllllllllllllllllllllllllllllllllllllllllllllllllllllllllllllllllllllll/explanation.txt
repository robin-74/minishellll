step 1 : 
    implrent at first ne5od men luser linput evalueate it  parse it in a loop (repl)
    2ri linput men luser , kebon bi buffer terminate the buffer then  fade men buffer byte by byte kebon bi lin w handle everything  w hadnleinput will handle exit .. and fi  signal for ctrl  c 
    implmemnt echo w handled eza -n in the firs we dont do a new line and w ignore spaces bil awal w space ben lkalete tkoun space 1 no multple one 
    implemet cd (use chdir)* to change  the directoryr 

to do:
    



    ssize_t is designed to represent sizes or counts that can be negative (e.g., return values from functions like read or write that can fail).

    size_t is portable across different platforms and architectures. Its size adjusts based on the system (e.g., 32-bit or 64-bit).
    unsigned int has a fixed size (usually 32 bits), which may not be sufficient for large sizes on 64-bit systems.
     int is typically 32 bits, which may not be large enough for certain use cases (e.g., large sizes or counts).





      What We've Done So Far in Minishell
1Ô∏è‚É£ Environment Setup

Duplicated envp using ft_dup_matrix().
Set essential environment variables (PWD, SHLVL, PATH, _).
Handled missing envp (if env -i is used).
2Ô∏è‚É£ Process Initialization

Implemented mini_getpid() to store the shell‚Äôs PID using getpid().
Initialized t_prompt structure with the environment and command storage.
3Ô∏è‚É£ Understanding _ Variable

Tested _ in Linux to understand its behavior.
Ensured Minishell mimics Bash by setting _ to argv[0] if missing.
‚úÖ Next Steps: Start Parsing ‚Üí Begin with tokenization & syntax validation! üöÄ







